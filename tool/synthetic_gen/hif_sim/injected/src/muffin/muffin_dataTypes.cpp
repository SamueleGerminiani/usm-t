// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#include "../../inc/muffin/muffin.hpp"

namespace muffin {

uint64_t instance_number = 0ULL;

uint64_t fault_number = 0ULL;

int64_t stuck_at = 0LL;


uint64_t toggle_bit( uint64_t position )
{
    return 1ULL << position;
}



uint64_t rise_bit( uint64_t variable, uint64_t position )
{
    return toggle_bit( position ) & variable;
}



uint64_t clear_bit( uint64_t variable, uint64_t position )
{
    return ~toggle_bit( position ) & variable;
}



bool check_instance( uint64_t instance )
{
    return instance == instance_number;
}



bool check_location( uint64_t offset, uint64_t dimension )
{
    return fault_number >= offset && fault_number < dimension + offset;
}



bool is_active( uint64_t instance, uint64_t offset, uint64_t dimension )
{
    return check_instance( instance ) && check_location( offset, dimension );
}



int8_t inject( uint64_t instance, uint64_t offset, uint64_t dimension, int8_t variable
     )
{
    return is_active( instance, offset, dimension ) ? static_cast< int8_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



int16_t inject_renamed( uint64_t instance, uint64_t offset, uint64_t dimension,
     int16_t variable )
{
    return is_active( instance, offset, dimension ) ? static_cast< int16_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



int32_t inject_renamed_0( uint64_t instance, uint64_t offset, uint64_t dimension,
     int32_t variable )
{
    return is_active( instance, offset, dimension ) ? static_cast< int32_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



int64_t inject_renamed_1( uint64_t instance, uint64_t offset, uint64_t dimension,
     int64_t variable )
{
    return is_active( instance, offset, dimension ) ? static_cast< int64_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



uint8_t inject_renamed_2( uint64_t instance, uint64_t offset, uint64_t dimension,
     uint8_t variable )
{
    return is_active( instance, offset, dimension ) ? static_cast< uint8_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



uint16_t inject_renamed_3( uint64_t instance, uint64_t offset, uint64_t dimension,
     uint16_t variable )
{
    return is_active( instance, offset, dimension ) ? static_cast< uint16_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



uint32_t inject_renamed_4( uint64_t instance, uint64_t offset, uint64_t dimension,
     uint32_t variable )
{
    return is_active( instance, offset, dimension ) ? static_cast< uint32_t >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}



uint64_t inject_renamed_5( uint64_t instance, uint64_t offset, uint64_t dimension,
     uint64_t variable )
{
    return is_active( instance, offset, dimension ) ? clear_bit( variable, fault_number
             - offset ) | rise_bit( static_cast< uint64_t >( -stuck_at ), fault_number
             - offset ) : variable;
}



bool inject( uint64_t instance, uint64_t offset, uint64_t dimension, bool variable
     )
{
    return is_active( instance, offset, dimension ) ? static_cast< bool >( clear_bit
        ( static_cast< uint64_t >( variable ), fault_number - offset ) | rise_bit
        ( static_cast< uint64_t >( -stuck_at ), fault_number - offset ) ) : variable;
}


uint64_t hif_global_instance_counter = 0ULL;


uint64_t hif_next_instance_counter()
{
    hif_global_instance_counter = hif_global_instance_counter + 1ULL;
    return hif_global_instance_counter;
}


} // end namespace muffin

