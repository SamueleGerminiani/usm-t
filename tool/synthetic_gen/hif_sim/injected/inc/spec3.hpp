// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef SPEC3_HH
#define SPEC3_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class spec3
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_3_old;
    bool a_3_old;
    bool clock_old;
    struct spec3_iostruct{
        bool * clock;
        bool * a_3;
        bool * b_3;
        bool * c_3;

        spec3_iostruct():
            clock(nullptr),
            a_3(nullptr),
            b_3(nullptr),
            c_3(nullptr)
        {}

        spec3_iostruct( bool * clock_3, bool * a_3_0, bool * b_3_0, bool * c_3_0
             ):
            clock(clock_3),
            a_3(a_3_0),
            b_3(b_3_0),
            c_3(c_3_0)
        {}

        ~spec3_iostruct()
        {}

        bool operator == (const spec3_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_3 != other.a_3) return false;
            if (b_3 != other.b_3) return false;
            if (c_3 != other.c_3) return false;
            return true;
        }
    };
    spec3_iostruct hif_a2t_data;
    spec3();


    ~spec3();


    bool process_in_queue;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void start_of_simulation();


    void initialize();


private:

    spec3( const spec3 & );
    const spec3& operator= ( const spec3 & );


};


#endif

