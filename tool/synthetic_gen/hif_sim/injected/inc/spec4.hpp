// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef SPEC4_HH
#define SPEC4_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class spec4
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_4_old;
    bool a_4_old;
    bool clock_old;
    struct spec4_iostruct{
        bool * clock;
        bool * a_4;
        bool * b_4;
        bool * c_4;

        spec4_iostruct():
            clock(nullptr),
            a_4(nullptr),
            b_4(nullptr),
            c_4(nullptr)
        {}

        spec4_iostruct( bool * clock_4, bool * a_4_0, bool * b_4_0, bool * c_4_0
             ):
            clock(clock_4),
            a_4(a_4_0),
            b_4(b_4_0),
            c_4(c_4_0)
        {}

        ~spec4_iostruct()
        {}

        bool operator == (const spec4_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_4 != other.a_4) return false;
            if (b_4 != other.b_4) return false;
            if (c_4 != other.c_4) return false;
            return true;
        }
    };
    spec4_iostruct hif_a2t_data;
    spec4();


    ~spec4();


    bool process_in_queue;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void start_of_simulation();


    void initialize();


private:

    spec4( const spec4 & );
    const spec4& operator= ( const spec4 & );


};


#endif

