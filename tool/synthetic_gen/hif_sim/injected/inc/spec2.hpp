// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef SPEC2_HH
#define SPEC2_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class spec2
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_2_old;
    bool a_2_old;
    bool clock_old;
    struct spec2_iostruct{
        bool * clock;
        bool * a_2;
        bool * b_2;
        bool * c_2;

        spec2_iostruct():
            clock(nullptr),
            a_2(nullptr),
            b_2(nullptr),
            c_2(nullptr)
        {}

        spec2_iostruct( bool * clock_2, bool * a_2_0, bool * b_2_0, bool * c_2_0
             ):
            clock(clock_2),
            a_2(a_2_0),
            b_2(b_2_0),
            c_2(c_2_0)
        {}

        ~spec2_iostruct()
        {}

        bool operator == (const spec2_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_2 != other.a_2) return false;
            if (b_2 != other.b_2) return false;
            if (c_2 != other.c_2) return false;
            return true;
        }
    };
    spec2_iostruct hif_a2t_data;
    spec2();


    ~spec2();


    bool process_in_queue;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void start_of_simulation();


    void initialize();


private:

    spec2( const spec2 & );
    const spec2& operator= ( const spec2 & );


};


#endif

