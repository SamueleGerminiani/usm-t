// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef TOP_MODULE_HH
#define TOP_MODULE_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"
#include "spec0.hpp"
#include "spec1.hpp"
#include "spec2.hpp"
#include "spec3.hpp"
#include "spec4.hpp"
#include "spec5.hpp"

class top_module
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_5_old;
    bool a_5_old;
    bool b_4_old;
    bool a_4_old;
    bool b_3_old;
    bool a_3_old;
    bool b_2_old;
    bool a_2_old;
    bool b_1_old;
    bool a_1_old;
    bool b_0_old;
    bool a_0_old;
    bool clock_old;
    struct top_module_iostruct{
        bool clock;
        bool a_0;
        bool b_0;
        bool a_1;
        bool b_1;
        bool a_2;
        bool b_2;
        bool a_3;
        bool b_3;
        bool a_4;
        bool b_4;
        bool a_5;
        bool b_5;
        bool c_0;
        bool c_1;
        bool c_2;
        bool c_3;
        bool c_4;
        bool c_5;

        top_module_iostruct():
            clock(false),
            a_0(false),
            b_0(false),
            a_1(false),
            b_1(false),
            a_2(false),
            b_2(false),
            a_3(false),
            b_3(false),
            a_4(false),
            b_4(false),
            a_5(false),
            b_5(false),
            c_0(false),
            c_1(false),
            c_2(false),
            c_3(false),
            c_4(false),
            c_5(false)
        {}

        top_module_iostruct( const bool clock_6, const bool a_0_1, const bool b_0_1,
             const bool a_1_1, const bool b_1_1, const bool a_2_1, const bool b_2_1,
             const bool a_3_1, const bool b_3_1, const bool a_4_1, const bool b_4_1,
             const bool a_5_1, const bool b_5_1, const bool c_0_1, const bool c_1_1,
             const bool c_2_1, const bool c_3_1, const bool c_4_1, const bool c_5_1
             ):
            clock(clock_6),
            a_0(a_0_1),
            b_0(b_0_1),
            a_1(a_1_1),
            b_1(b_1_1),
            a_2(a_2_1),
            b_2(b_2_1),
            a_3(a_3_1),
            b_3(b_3_1),
            a_4(a_4_1),
            b_4(b_4_1),
            a_5(a_5_1),
            b_5(b_5_1),
            c_0(c_0_1),
            c_1(c_1_1),
            c_2(c_2_1),
            c_3(c_3_1),
            c_4(c_4_1),
            c_5(c_5_1)
        {}

        ~top_module_iostruct()
        {}

        bool operator == (const top_module_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_0 != other.a_0) return false;
            if (b_0 != other.b_0) return false;
            if (a_1 != other.a_1) return false;
            if (b_1 != other.b_1) return false;
            if (a_2 != other.a_2) return false;
            if (b_2 != other.b_2) return false;
            if (a_3 != other.a_3) return false;
            if (b_3 != other.b_3) return false;
            if (a_4 != other.a_4) return false;
            if (b_4 != other.b_4) return false;
            if (a_5 != other.a_5) return false;
            if (b_5 != other.b_5) return false;
            if (c_0 != other.c_0) return false;
            if (c_1 != other.c_1) return false;
            if (c_2 != other.c_2) return false;
            if (c_3 != other.c_3) return false;
            if (c_4 != other.c_4) return false;
            if (c_5 != other.c_5) return false;
            return true;
        }
    };
    top_module_iostruct hif_a2t_data;
    top_module();


    ~top_module();


    spec0 spec_sbm0;
    spec1 spec_sbm1;
    spec2 spec_sbm2;
    spec3 spec_sbm3;
    spec4 spec_sbm4;
    spec5 spec_sbm5;
    bool process_in_queue;

    bool perform_bindings();

    bool _bindings_completed;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void synch_elaboration();


    void simulate( top_module_iostruct * io_exchange, int32_t & cycles_number );


    void start_of_simulation();


    void initialize();


    void finalize();


private:

    top_module( const top_module & );
    const top_module& operator= ( const top_module & );


};


#endif

