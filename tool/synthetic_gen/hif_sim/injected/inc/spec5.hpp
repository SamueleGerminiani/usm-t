// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef SPEC5_HH
#define SPEC5_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class spec5
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_5_old;
    bool a_5_old;
    bool clock_old;
    struct spec5_iostruct{
        bool * clock;
        bool * a_5;
        bool * b_5;
        bool * c_5;

        spec5_iostruct():
            clock(nullptr),
            a_5(nullptr),
            b_5(nullptr),
            c_5(nullptr)
        {}

        spec5_iostruct( bool * clock_5, bool * a_5_0, bool * b_5_0, bool * c_5_0
             ):
            clock(clock_5),
            a_5(a_5_0),
            b_5(b_5_0),
            c_5(c_5_0)
        {}

        ~spec5_iostruct()
        {}

        bool operator == (const spec5_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_5 != other.a_5) return false;
            if (b_5 != other.b_5) return false;
            if (c_5 != other.c_5) return false;
            return true;
        }
    };
    spec5_iostruct hif_a2t_data;
    spec5();


    ~spec5();


    bool process_in_queue;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void start_of_simulation();


    void initialize();


private:

    spec5( const spec5 & );
    const spec5& operator= ( const spec5 & );


};


#endif

