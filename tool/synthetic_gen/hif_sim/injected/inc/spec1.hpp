// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef SPEC1_HH
#define SPEC1_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class spec1
{

public:

    muffin::FaultNode hif_fault_node;
    bool b_1_old;
    bool a_1_old;
    bool clock_old;
    struct spec1_iostruct{
        bool * clock;
        bool * a_1;
        bool * b_1;
        bool * c_1;

        spec1_iostruct():
            clock(nullptr),
            a_1(nullptr),
            b_1(nullptr),
            c_1(nullptr)
        {}

        spec1_iostruct( bool * clock_1, bool * a_1_0, bool * b_1_0, bool * c_1_0
             ):
            clock(clock_1),
            a_1(a_1_0),
            b_1(b_1_0),
            c_1(c_1_0)
        {}

        ~spec1_iostruct()
        {}

        bool operator == (const spec1_iostruct & other) const
        {
            if (clock != other.clock) return false;
            if (a_1 != other.a_1) return false;
            if (b_1 != other.b_1) return false;
            if (c_1 != other.c_1) return false;
            return true;
        }
    };
    spec1_iostruct hif_a2t_data;
    spec1();


    ~spec1();


    bool process_in_queue;

    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void start_of_simulation();


    void initialize();


private:

    spec1( const spec1 & );
    const spec1& operator= ( const spec1 & );


};


#endif

