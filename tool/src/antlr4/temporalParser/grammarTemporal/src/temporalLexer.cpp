
// Generated from temporal.g4 by ANTLR 4.12.0


#include "temporalLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TemporalLexerStaticData final {
  TemporalLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TemporalLexerStaticData(const TemporalLexerStaticData&) = delete;
  TemporalLexerStaticData(TemporalLexerStaticData&&) = delete;
  TemporalLexerStaticData& operator=(const TemporalLexerStaticData&) = delete;
  TemporalLexerStaticData& operator=(TemporalLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag temporallexerLexerOnceFlag;
TemporalLexerStaticData *temporallexerLexerStaticData = nullptr;

void temporallexerLexerInitialize() {
  assert(temporallexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<TemporalLexerStaticData>(
    std::vector<std::string>{
      "PLACEHOLDER", "EVENTUALLY", "STRONG_EVENTUALLY", "ALWAYS", "STRONG_ALWAYS", 
      "WEAK_NEXT", "STRONG_NEXT", "WEAK_UNTIL", "STRONG_UNTIL", "WEAK_RELEASE", 
      "STRONG_RELEASE", "DOTS", "IMPL", "IMPLO", "IFF", "SEREIMPL", "SEREIMPLO", 
      "ASS", "DELAY", "SCOL", "FIRST_MATCH", "TNOT", "TAND", "INTERSECT", 
      "TOR", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", "INT_VARIABLE", "CONST_SUFFIX", 
      "FLOAT_CONSTANT", "FLOAT_VARIABLE", "LCURLY", "RCURLY", "LSQUARED", 
      "RSQUARED", "LROUND", "RROUND", "INSIDE", "FUNCTION", "VARIABLE", 
      "VALID_ID_START", "VALID_ID_CHAR", "SINTEGER", "UINTEGER", "FLOAT", 
      "GCC_BINARY", "HEX", "VERILOG_BINARY", "FVL", "SINGLE_QUOTE", "START_VAR", 
      "END_VAR", "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", "LE", 
      "EQ", "NEQ", "BAND", "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", "AND", 
      "OR", "NOT", "COL", "DCOL", "DOLLAR", "RANGE", "CLS_TYPE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "'s_eventually'", "", "'s_always'", "", "'s_nexttime'", 
      "", "", "'R'", "'M'", "'..'", "'=>'", "'->'", "'<->'", "", "", "'='", 
      "'##'", "';'", "'first_match'", "'not'", "'and'", "'intersect'", "'or'", 
      "", "", "", "", "", "", "'{'", "'}'", "'['", "']'", "'('", "')'", 
      "'inside'", "", "", "", "", "", "", "", "", "'''", "'+'", "'-'", "'*'", 
      "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'&'", "'|'", 
      "'^'", "'~'", "'<<'", "'>>'", "'&&'", "'||'", "'!'", "':'", "'::'", 
      "'$'", "'><'"
    },
    std::vector<std::string>{
      "", "PLACEHOLDER", "EVENTUALLY", "STRONG_EVENTUALLY", "ALWAYS", "STRONG_ALWAYS", 
      "WEAK_NEXT", "STRONG_NEXT", "WEAK_UNTIL", "STRONG_UNTIL", "WEAK_RELEASE", 
      "STRONG_RELEASE", "DOTS", "IMPL", "IMPLO", "IFF", "SEREIMPL", "SEREIMPLO", 
      "ASS", "DELAY", "SCOL", "FIRST_MATCH", "TNOT", "TAND", "INTERSECT", 
      "TOR", "BOOLEAN_CONSTANT", "BOOLEAN_VARIABLE", "INT_VARIABLE", "CONST_SUFFIX", 
      "FLOAT_CONSTANT", "FLOAT_VARIABLE", "LCURLY", "RCURLY", "LSQUARED", 
      "RSQUARED", "LROUND", "RROUND", "INSIDE", "FUNCTION", "SINTEGER", 
      "UINTEGER", "FLOAT", "GCC_BINARY", "HEX", "VERILOG_BINARY", "FVL", 
      "SINGLE_QUOTE", "PLUS", "MINUS", "TIMES", "DIV", "GT", "GE", "LT", 
      "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", "NEG", "LSHIFT", "RSHIFT", 
      "AND", "OR", "NOT", "COL", "DCOL", "DOLLAR", "RANGE", "CLS_TYPE", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,72,569,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,
  	1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,170,8,1,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,3,3,192,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,216,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,235,8,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,8,3,8,245,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,
  	12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
  	15,1,15,3,15,271,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,280,8,16,
  	1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,333,8,25,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,3,28,359,8,28,1,29,1,29,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
  	1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,415,8,38,1,39,1,39,
  	5,39,419,8,39,10,39,12,39,422,9,39,1,40,3,40,425,8,40,1,41,3,41,428,8,
  	41,1,42,1,42,4,42,432,8,42,11,42,12,42,433,1,43,4,43,437,8,43,11,43,12,
  	43,438,1,44,3,44,442,8,44,1,44,4,44,445,8,44,11,44,12,44,446,1,44,1,44,
  	4,44,451,8,44,11,44,12,44,452,1,44,3,44,456,8,44,1,44,4,44,459,8,44,11,
  	44,12,44,460,1,44,1,44,3,44,465,8,44,1,45,1,45,1,45,1,45,4,45,471,8,45,
  	11,45,12,45,472,1,46,1,46,1,46,1,46,4,46,479,8,46,11,46,12,46,480,1,46,
  	1,46,1,46,1,46,4,46,487,8,46,11,46,12,46,488,3,46,491,8,46,1,47,1,47,
  	1,47,1,48,1,48,4,48,498,8,48,11,48,12,48,499,1,49,1,49,1,50,1,50,1,51,
  	1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,
  	1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,63,
  	1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,
  	1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,74,1,74,
  	1,74,1,75,1,75,1,76,1,76,1,76,1,76,0,0,77,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,0,81,0,83,0,
  	85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,0,103,0,105,48,107,
  	49,109,50,111,51,113,52,115,53,117,54,119,55,121,56,123,57,125,58,127,
  	59,129,60,131,61,133,62,135,63,137,64,139,65,141,66,143,67,145,68,147,
  	69,149,70,151,71,153,72,1,0,8,3,0,65,90,95,95,97,122,8,0,40,41,46,46,
  	48,58,65,91,93,93,95,95,97,123,125,125,2,0,48,57,97,102,2,0,48,57,65,
  	70,2,0,66,66,98,98,3,0,48,49,120,120,122,122,2,0,75,75,83,83,3,0,9,10,
  	13,13,32,32,590,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
  	0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
  	0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
  	31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
  	0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
  	0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
  	63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
  	0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
  	0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
  	105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
  	115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
  	125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
  	135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,
  	145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,1,
  	155,1,0,0,0,3,169,1,0,0,0,5,171,1,0,0,0,7,191,1,0,0,0,9,193,1,0,0,0,11,
  	215,1,0,0,0,13,217,1,0,0,0,15,234,1,0,0,0,17,244,1,0,0,0,19,246,1,0,0,
  	0,21,248,1,0,0,0,23,250,1,0,0,0,25,253,1,0,0,0,27,256,1,0,0,0,29,259,
  	1,0,0,0,31,270,1,0,0,0,33,279,1,0,0,0,35,281,1,0,0,0,37,283,1,0,0,0,39,
  	286,1,0,0,0,41,288,1,0,0,0,43,300,1,0,0,0,45,304,1,0,0,0,47,308,1,0,0,
  	0,49,318,1,0,0,0,51,332,1,0,0,0,53,334,1,0,0,0,55,344,1,0,0,0,57,358,
  	1,0,0,0,59,360,1,0,0,0,61,362,1,0,0,0,63,373,1,0,0,0,65,375,1,0,0,0,67,
  	377,1,0,0,0,69,379,1,0,0,0,71,381,1,0,0,0,73,383,1,0,0,0,75,385,1,0,0,
  	0,77,414,1,0,0,0,79,416,1,0,0,0,81,424,1,0,0,0,83,427,1,0,0,0,85,429,
  	1,0,0,0,87,436,1,0,0,0,89,464,1,0,0,0,91,466,1,0,0,0,93,490,1,0,0,0,95,
  	492,1,0,0,0,97,495,1,0,0,0,99,501,1,0,0,0,101,503,1,0,0,0,103,505,1,0,
  	0,0,105,507,1,0,0,0,107,509,1,0,0,0,109,511,1,0,0,0,111,513,1,0,0,0,113,
  	515,1,0,0,0,115,517,1,0,0,0,117,520,1,0,0,0,119,522,1,0,0,0,121,525,1,
  	0,0,0,123,528,1,0,0,0,125,531,1,0,0,0,127,533,1,0,0,0,129,535,1,0,0,0,
  	131,537,1,0,0,0,133,539,1,0,0,0,135,542,1,0,0,0,137,545,1,0,0,0,139,548,
  	1,0,0,0,141,551,1,0,0,0,143,553,1,0,0,0,145,555,1,0,0,0,147,558,1,0,0,
  	0,149,560,1,0,0,0,151,563,1,0,0,0,153,565,1,0,0,0,155,156,5,80,0,0,156,
  	157,3,87,43,0,157,2,1,0,0,0,158,170,5,70,0,0,159,160,5,101,0,0,160,161,
  	5,118,0,0,161,162,5,101,0,0,162,163,5,110,0,0,163,164,5,116,0,0,164,165,
  	5,117,0,0,165,166,5,97,0,0,166,167,5,108,0,0,167,168,5,108,0,0,168,170,
  	5,121,0,0,169,158,1,0,0,0,169,159,1,0,0,0,170,4,1,0,0,0,171,172,5,115,
  	0,0,172,173,5,95,0,0,173,174,5,101,0,0,174,175,5,118,0,0,175,176,5,101,
  	0,0,176,177,5,110,0,0,177,178,5,116,0,0,178,179,5,117,0,0,179,180,5,97,
  	0,0,180,181,5,108,0,0,181,182,5,108,0,0,182,183,5,121,0,0,183,6,1,0,0,
  	0,184,192,5,71,0,0,185,186,5,97,0,0,186,187,5,108,0,0,187,188,5,119,0,
  	0,188,189,5,97,0,0,189,190,5,121,0,0,190,192,5,115,0,0,191,184,1,0,0,
  	0,191,185,1,0,0,0,192,8,1,0,0,0,193,194,5,115,0,0,194,195,5,95,0,0,195,
  	196,5,97,0,0,196,197,5,108,0,0,197,198,5,119,0,0,198,199,5,97,0,0,199,
  	200,5,121,0,0,200,201,5,115,0,0,201,10,1,0,0,0,202,216,5,88,0,0,203,204,
  	5,110,0,0,204,205,5,101,0,0,205,206,5,120,0,0,206,207,5,116,0,0,207,208,
  	5,116,0,0,208,209,5,105,0,0,209,210,5,109,0,0,210,216,5,101,0,0,211,212,
  	5,110,0,0,212,213,5,101,0,0,213,214,5,120,0,0,214,216,5,116,0,0,215,202,
  	1,0,0,0,215,203,1,0,0,0,215,211,1,0,0,0,216,12,1,0,0,0,217,218,5,115,
  	0,0,218,219,5,95,0,0,219,220,5,110,0,0,220,221,5,101,0,0,221,222,5,120,
  	0,0,222,223,5,116,0,0,223,224,5,116,0,0,224,225,5,105,0,0,225,226,5,109,
  	0,0,226,227,5,101,0,0,227,14,1,0,0,0,228,235,5,87,0,0,229,230,5,117,0,
  	0,230,231,5,110,0,0,231,232,5,116,0,0,232,233,5,105,0,0,233,235,5,108,
  	0,0,234,228,1,0,0,0,234,229,1,0,0,0,235,16,1,0,0,0,236,237,5,115,0,0,
  	237,238,5,95,0,0,238,239,5,117,0,0,239,240,5,110,0,0,240,241,5,116,0,
  	0,241,242,5,105,0,0,242,245,5,108,0,0,243,245,5,85,0,0,244,236,1,0,0,
  	0,244,243,1,0,0,0,245,18,1,0,0,0,246,247,5,82,0,0,247,20,1,0,0,0,248,
  	249,5,77,0,0,249,22,1,0,0,0,250,251,5,46,0,0,251,252,5,46,0,0,252,24,
  	1,0,0,0,253,254,5,61,0,0,254,255,5,62,0,0,255,26,1,0,0,0,256,257,5,45,
  	0,0,257,258,5,62,0,0,258,28,1,0,0,0,259,260,5,60,0,0,260,261,5,45,0,0,
  	261,262,5,62,0,0,262,30,1,0,0,0,263,264,5,124,0,0,264,265,5,61,0,0,265,
  	271,5,62,0,0,266,267,5,91,0,0,267,268,5,93,0,0,268,269,5,61,0,0,269,271,
  	5,62,0,0,270,263,1,0,0,0,270,266,1,0,0,0,271,32,1,0,0,0,272,273,5,124,
  	0,0,273,274,5,45,0,0,274,280,5,62,0,0,275,276,5,91,0,0,276,277,5,93,0,
  	0,277,278,5,45,0,0,278,280,5,62,0,0,279,272,1,0,0,0,279,275,1,0,0,0,280,
  	34,1,0,0,0,281,282,5,61,0,0,282,36,1,0,0,0,283,284,5,35,0,0,284,285,5,
  	35,0,0,285,38,1,0,0,0,286,287,5,59,0,0,287,40,1,0,0,0,288,289,5,102,0,
  	0,289,290,5,105,0,0,290,291,5,114,0,0,291,292,5,115,0,0,292,293,5,116,
  	0,0,293,294,5,95,0,0,294,295,5,109,0,0,295,296,5,97,0,0,296,297,5,116,
  	0,0,297,298,5,99,0,0,298,299,5,104,0,0,299,42,1,0,0,0,300,301,5,110,0,
  	0,301,302,5,111,0,0,302,303,5,116,0,0,303,44,1,0,0,0,304,305,5,97,0,0,
  	305,306,5,110,0,0,306,307,5,100,0,0,307,46,1,0,0,0,308,309,5,105,0,0,
  	309,310,5,110,0,0,310,311,5,116,0,0,311,312,5,101,0,0,312,313,5,114,0,
  	0,313,314,5,115,0,0,314,315,5,101,0,0,315,316,5,99,0,0,316,317,5,116,
  	0,0,317,48,1,0,0,0,318,319,5,111,0,0,319,320,5,114,0,0,320,50,1,0,0,0,
  	321,322,5,64,0,0,322,323,5,116,0,0,323,324,5,114,0,0,324,325,5,117,0,
  	0,325,333,5,101,0,0,326,327,5,64,0,0,327,328,5,102,0,0,328,329,5,97,0,
  	0,329,330,5,108,0,0,330,331,5,115,0,0,331,333,5,101,0,0,332,321,1,0,0,
  	0,332,326,1,0,0,0,333,52,1,0,0,0,334,335,3,101,50,0,335,336,3,79,39,0,
  	336,337,5,44,0,0,337,338,5,98,0,0,338,339,5,111,0,0,339,340,5,111,0,0,
  	340,341,5,108,0,0,341,342,1,0,0,0,342,343,3,103,51,0,343,54,1,0,0,0,344,
  	345,3,101,50,0,345,346,3,79,39,0,346,347,5,44,0,0,347,348,5,105,0,0,348,
  	349,5,110,0,0,349,350,5,116,0,0,350,351,1,0,0,0,351,352,3,103,51,0,352,
  	56,1,0,0,0,353,354,5,108,0,0,354,359,5,108,0,0,355,356,5,117,0,0,356,
  	357,5,108,0,0,357,359,5,108,0,0,358,353,1,0,0,0,358,355,1,0,0,0,359,58,
  	1,0,0,0,360,361,3,89,44,0,361,60,1,0,0,0,362,363,3,101,50,0,363,364,3,
  	79,39,0,364,365,5,44,0,0,365,366,5,102,0,0,366,367,5,108,0,0,367,368,
  	5,111,0,0,368,369,5,97,0,0,369,370,5,116,0,0,370,371,1,0,0,0,371,372,
  	3,103,51,0,372,62,1,0,0,0,373,374,5,123,0,0,374,64,1,0,0,0,375,376,5,
  	125,0,0,376,66,1,0,0,0,377,378,5,91,0,0,378,68,1,0,0,0,379,380,5,93,0,
  	0,380,70,1,0,0,0,381,382,5,40,0,0,382,72,1,0,0,0,383,384,5,41,0,0,384,
  	74,1,0,0,0,385,386,5,105,0,0,386,387,5,110,0,0,387,388,5,115,0,0,388,
  	389,5,105,0,0,389,390,5,100,0,0,390,391,5,101,0,0,391,76,1,0,0,0,392,
  	393,5,36,0,0,393,394,5,115,0,0,394,395,5,116,0,0,395,396,5,97,0,0,396,
  	397,5,98,0,0,397,398,5,108,0,0,398,415,5,101,0,0,399,400,5,36,0,0,400,
  	401,5,112,0,0,401,402,5,97,0,0,402,403,5,115,0,0,403,415,5,116,0,0,404,
  	405,5,36,0,0,405,406,5,114,0,0,406,407,5,111,0,0,407,408,5,115,0,0,408,
  	415,5,101,0,0,409,410,5,36,0,0,410,411,5,102,0,0,411,412,5,101,0,0,412,
  	413,5,108,0,0,413,415,5,108,0,0,414,392,1,0,0,0,414,399,1,0,0,0,414,404,
  	1,0,0,0,414,409,1,0,0,0,415,78,1,0,0,0,416,420,3,81,40,0,417,419,3,83,
  	41,0,418,417,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,
  	421,80,1,0,0,0,422,420,1,0,0,0,423,425,7,0,0,0,424,423,1,0,0,0,425,82,
  	1,0,0,0,426,428,7,1,0,0,427,426,1,0,0,0,428,84,1,0,0,0,429,431,5,45,0,
  	0,430,432,2,48,57,0,431,430,1,0,0,0,432,433,1,0,0,0,433,431,1,0,0,0,433,
  	434,1,0,0,0,434,86,1,0,0,0,435,437,2,48,57,0,436,435,1,0,0,0,437,438,
  	1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,88,1,0,0,0,440,442,5,45,0,
  	0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,445,2,48,57,0,444,
  	443,1,0,0,0,445,446,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,448,1,
  	0,0,0,448,450,5,46,0,0,449,451,2,48,57,0,450,449,1,0,0,0,451,452,1,0,
  	0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,465,1,0,0,0,454,456,5,45,0,0,
  	455,454,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,2,48,57,0,458,
  	457,1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,462,1,
  	0,0,0,462,463,5,46,0,0,463,465,5,102,0,0,464,441,1,0,0,0,464,455,1,0,
  	0,0,465,90,1,0,0,0,466,467,5,48,0,0,467,468,5,98,0,0,468,470,1,0,0,0,
  	469,471,2,48,49,0,470,469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,
  	473,1,0,0,0,473,92,1,0,0,0,474,475,5,48,0,0,475,476,5,120,0,0,476,478,
  	1,0,0,0,477,479,7,2,0,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,1,0,0,
  	0,480,481,1,0,0,0,481,491,1,0,0,0,482,483,5,48,0,0,483,484,5,120,0,0,
  	484,486,1,0,0,0,485,487,7,3,0,0,486,485,1,0,0,0,487,488,1,0,0,0,488,486,
  	1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,474,1,0,0,0,490,482,1,0,0,
  	0,491,94,1,0,0,0,492,493,3,99,49,0,493,494,3,97,48,0,494,96,1,0,0,0,495,
  	497,7,4,0,0,496,498,7,5,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,497,1,
  	0,0,0,499,500,1,0,0,0,500,98,1,0,0,0,501,502,5,39,0,0,502,100,1,0,0,0,
  	503,504,5,171,0,0,504,102,1,0,0,0,505,506,5,187,0,0,506,104,1,0,0,0,507,
  	508,5,43,0,0,508,106,1,0,0,0,509,510,5,45,0,0,510,108,1,0,0,0,511,512,
  	5,42,0,0,512,110,1,0,0,0,513,514,5,47,0,0,514,112,1,0,0,0,515,516,5,62,
  	0,0,516,114,1,0,0,0,517,518,5,62,0,0,518,519,5,61,0,0,519,116,1,0,0,0,
  	520,521,5,60,0,0,521,118,1,0,0,0,522,523,5,60,0,0,523,524,5,61,0,0,524,
  	120,1,0,0,0,525,526,5,61,0,0,526,527,5,61,0,0,527,122,1,0,0,0,528,529,
  	5,33,0,0,529,530,5,61,0,0,530,124,1,0,0,0,531,532,5,38,0,0,532,126,1,
  	0,0,0,533,534,5,124,0,0,534,128,1,0,0,0,535,536,5,94,0,0,536,130,1,0,
  	0,0,537,538,5,126,0,0,538,132,1,0,0,0,539,540,5,60,0,0,540,541,5,60,0,
  	0,541,134,1,0,0,0,542,543,5,62,0,0,543,544,5,62,0,0,544,136,1,0,0,0,545,
  	546,5,38,0,0,546,547,5,38,0,0,547,138,1,0,0,0,548,549,5,124,0,0,549,550,
  	5,124,0,0,550,140,1,0,0,0,551,552,5,33,0,0,552,142,1,0,0,0,553,554,5,
  	58,0,0,554,144,1,0,0,0,555,556,5,58,0,0,556,557,5,58,0,0,557,146,1,0,
  	0,0,558,559,5,36,0,0,559,148,1,0,0,0,560,561,5,62,0,0,561,562,5,60,0,
  	0,562,150,1,0,0,0,563,564,7,6,0,0,564,152,1,0,0,0,565,566,7,7,0,0,566,
  	567,1,0,0,0,567,568,6,76,0,0,568,154,1,0,0,0,29,0,169,191,215,234,244,
  	270,279,332,358,414,420,424,427,433,438,441,446,452,455,460,464,472,478,
  	480,486,488,490,499,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  temporallexerLexerStaticData = staticData.release();
}

}

temporalLexer::temporalLexer(CharStream *input) : Lexer(input) {
  temporalLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *temporallexerLexerStaticData->atn, temporallexerLexerStaticData->decisionToDFA, temporallexerLexerStaticData->sharedContextCache);
}

temporalLexer::~temporalLexer() {
  delete _interpreter;
}

std::string temporalLexer::getGrammarFileName() const {
  return "temporal.g4";
}

const std::vector<std::string>& temporalLexer::getRuleNames() const {
  return temporallexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& temporalLexer::getChannelNames() const {
  return temporallexerLexerStaticData->channelNames;
}

const std::vector<std::string>& temporalLexer::getModeNames() const {
  return temporallexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& temporalLexer::getVocabulary() const {
  return temporallexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView temporalLexer::getSerializedATN() const {
  return temporallexerLexerStaticData->serializedATN;
}

const atn::ATN& temporalLexer::getATN() const {
  return *temporallexerLexerStaticData->atn;
}




void temporalLexer::initialize() {
  ::antlr4::internal::call_once(temporallexerLexerOnceFlag, temporallexerLexerInitialize);
}
