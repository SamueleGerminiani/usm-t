
// Generated from temporal.g4 by ANTLR 4.12.0


#include "temporalLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TemporalLexerStaticData final {
  TemporalLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TemporalLexerStaticData(const TemporalLexerStaticData&) = delete;
  TemporalLexerStaticData(TemporalLexerStaticData&&) = delete;
  TemporalLexerStaticData& operator=(const TemporalLexerStaticData&) = delete;
  TemporalLexerStaticData& operator=(TemporalLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag temporallexerLexerOnceFlag;
TemporalLexerStaticData *temporallexerLexerStaticData = nullptr;

void temporallexerLexerInitialize() {
  assert(temporallexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<TemporalLexerStaticData>(
    std::vector<std::string>{
      "PLACEHOLDER", "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", 
      "DOTS", "IMPL", "IMPLO", "IFF", "SEREIMPL", "SEREIMPLO", "ASS", "DELAY", 
      "SCOL", "FIRST_MATCH", "TNOT", "TAND", "INTERSECT", "TOR", "BOOLEAN_CONSTANT", 
      "BOOLEAN_VARIABLE", "INT_VARIABLE", "CONST_SUFFIX", "FLOAT_CONSTANT", 
      "FLOAT_VARIABLE", "LCURLY", "RCURLY", "LSQUARED", "RSQUARED", "LROUND", 
      "RROUND", "INSIDE", "FUNCTION", "VARIABLE", "VALID_ID_START", "VALID_ID_CHAR", 
      "SINTEGER", "UINTEGER", "FLOAT", "GCC_BINARY", "HEX", "VERILOG_BINARY", 
      "FVL", "SINGLE_QUOTE", "START_VAR", "END_VAR", "PLUS", "MINUS", "TIMES", 
      "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", 
      "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "COL", "DCOL", "DOLLAR", 
      "RANGE", "CLS_TYPE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "'R'", "'..'", "'=>'", "'->'", "'<->'", "", 
      "", "'='", "'##'", "';'", "'first_match'", "'not'", "'and'", "'intersect'", 
      "'or'", "", "", "", "", "", "", "'{'", "'}'", "'['", "']'", "'('", 
      "')'", "'inside'", "", "", "", "", "", "", "", "", "'''", "'+'", "'-'", 
      "'*'", "'/'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'&'", 
      "'|'", "'^'", "'~'", "'<<'", "'>>'", "'&&'", "'||'", "'!'", "':'", 
      "'::'", "'$'", "'><'"
    },
    std::vector<std::string>{
      "", "PLACEHOLDER", "EVENTUALLY", "ALWAYS", "NEXT", "UNTIL", "RELEASE", 
      "DOTS", "IMPL", "IMPLO", "IFF", "SEREIMPL", "SEREIMPLO", "ASS", "DELAY", 
      "SCOL", "FIRST_MATCH", "TNOT", "TAND", "INTERSECT", "TOR", "BOOLEAN_CONSTANT", 
      "BOOLEAN_VARIABLE", "INT_VARIABLE", "CONST_SUFFIX", "FLOAT_CONSTANT", 
      "FLOAT_VARIABLE", "LCURLY", "RCURLY", "LSQUARED", "RSQUARED", "LROUND", 
      "RROUND", "INSIDE", "FUNCTION", "SINTEGER", "UINTEGER", "FLOAT", "GCC_BINARY", 
      "HEX", "VERILOG_BINARY", "FVL", "SINGLE_QUOTE", "PLUS", "MINUS", "TIMES", 
      "DIV", "GT", "GE", "LT", "LE", "EQ", "NEQ", "BAND", "BOR", "BXOR", 
      "NEG", "LSHIFT", "RSHIFT", "AND", "OR", "NOT", "COL", "DCOL", "DOLLAR", 
      "RANGE", "CLS_TYPE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,67,515,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,3,1,160,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,169,8,2,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,184,8,3,1,4,1,4,1,4,1,4,1,4,1,
  	4,1,4,3,4,193,8,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
  	1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,217,8,10,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,3,11,226,8,11,1,12,1,12,1,13,1,13,1,13,1,14,1,
  	14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
  	16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,3,20,279,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
  	23,1,23,3,23,305,8,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
  	31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,3,33,361,8,33,1,34,1,34,5,34,365,8,34,10,34,12,34,368,9,
  	34,1,35,3,35,371,8,35,1,36,3,36,374,8,36,1,37,1,37,4,37,378,8,37,11,37,
  	12,37,379,1,38,4,38,383,8,38,11,38,12,38,384,1,39,3,39,388,8,39,1,39,
  	4,39,391,8,39,11,39,12,39,392,1,39,1,39,4,39,397,8,39,11,39,12,39,398,
  	1,39,3,39,402,8,39,1,39,4,39,405,8,39,11,39,12,39,406,1,39,1,39,3,39,
  	411,8,39,1,40,1,40,1,40,1,40,4,40,417,8,40,11,40,12,40,418,1,41,1,41,
  	1,41,1,41,4,41,425,8,41,11,41,12,41,426,1,41,1,41,1,41,1,41,4,41,433,
  	8,41,11,41,12,41,434,3,41,437,8,41,1,42,1,42,1,42,1,43,1,43,4,43,444,
  	8,43,11,43,12,43,445,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
  	1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,
  	1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,
  	1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,
  	1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,
  	1,71,1,71,0,0,72,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
  	23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
  	23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
  	69,0,71,0,73,0,75,35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,91,0,93,
  	0,95,43,97,44,99,45,101,46,103,47,105,48,107,49,109,50,111,51,113,52,
  	115,53,117,54,119,55,121,56,123,57,125,58,127,59,129,60,131,61,133,62,
  	135,63,137,64,139,65,141,66,143,67,1,0,8,3,0,65,90,95,95,97,122,8,0,40,
  	41,46,46,48,58,65,91,93,93,95,95,97,123,125,125,2,0,48,57,97,102,2,0,
  	48,57,65,70,2,0,66,66,98,98,3,0,48,49,120,120,122,122,2,0,75,75,83,83,
  	3,0,9,10,13,13,32,32,536,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
  	0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
  	19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
  	0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
  	0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
  	51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
  	0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
  	0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
  	89,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
  	1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
  	1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
  	1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
  	1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,
  	1,0,0,0,1,145,1,0,0,0,3,159,1,0,0,0,5,168,1,0,0,0,7,183,1,0,0,0,9,192,
  	1,0,0,0,11,194,1,0,0,0,13,196,1,0,0,0,15,199,1,0,0,0,17,202,1,0,0,0,19,
  	205,1,0,0,0,21,216,1,0,0,0,23,225,1,0,0,0,25,227,1,0,0,0,27,229,1,0,0,
  	0,29,232,1,0,0,0,31,234,1,0,0,0,33,246,1,0,0,0,35,250,1,0,0,0,37,254,
  	1,0,0,0,39,264,1,0,0,0,41,278,1,0,0,0,43,280,1,0,0,0,45,290,1,0,0,0,47,
  	304,1,0,0,0,49,306,1,0,0,0,51,308,1,0,0,0,53,319,1,0,0,0,55,321,1,0,0,
  	0,57,323,1,0,0,0,59,325,1,0,0,0,61,327,1,0,0,0,63,329,1,0,0,0,65,331,
  	1,0,0,0,67,360,1,0,0,0,69,362,1,0,0,0,71,370,1,0,0,0,73,373,1,0,0,0,75,
  	375,1,0,0,0,77,382,1,0,0,0,79,410,1,0,0,0,81,412,1,0,0,0,83,436,1,0,0,
  	0,85,438,1,0,0,0,87,441,1,0,0,0,89,447,1,0,0,0,91,449,1,0,0,0,93,451,
  	1,0,0,0,95,453,1,0,0,0,97,455,1,0,0,0,99,457,1,0,0,0,101,459,1,0,0,0,
  	103,461,1,0,0,0,105,463,1,0,0,0,107,466,1,0,0,0,109,468,1,0,0,0,111,471,
  	1,0,0,0,113,474,1,0,0,0,115,477,1,0,0,0,117,479,1,0,0,0,119,481,1,0,0,
  	0,121,483,1,0,0,0,123,485,1,0,0,0,125,488,1,0,0,0,127,491,1,0,0,0,129,
  	494,1,0,0,0,131,497,1,0,0,0,133,499,1,0,0,0,135,501,1,0,0,0,137,504,1,
  	0,0,0,139,506,1,0,0,0,141,509,1,0,0,0,143,511,1,0,0,0,145,146,5,80,0,
  	0,146,147,3,77,38,0,147,2,1,0,0,0,148,160,5,70,0,0,149,150,5,101,0,0,
  	150,151,5,118,0,0,151,152,5,101,0,0,152,153,5,110,0,0,153,154,5,116,0,
  	0,154,155,5,117,0,0,155,156,5,97,0,0,156,157,5,108,0,0,157,158,5,108,
  	0,0,158,160,5,121,0,0,159,148,1,0,0,0,159,149,1,0,0,0,160,4,1,0,0,0,161,
  	169,5,71,0,0,162,163,5,97,0,0,163,164,5,108,0,0,164,165,5,119,0,0,165,
  	166,5,97,0,0,166,167,5,121,0,0,167,169,5,115,0,0,168,161,1,0,0,0,168,
  	162,1,0,0,0,169,6,1,0,0,0,170,184,5,88,0,0,171,172,5,110,0,0,172,173,
  	5,101,0,0,173,174,5,120,0,0,174,175,5,116,0,0,175,176,5,116,0,0,176,177,
  	5,105,0,0,177,178,5,109,0,0,178,184,5,101,0,0,179,180,5,110,0,0,180,181,
  	5,101,0,0,181,182,5,120,0,0,182,184,5,116,0,0,183,170,1,0,0,0,183,171,
  	1,0,0,0,183,179,1,0,0,0,184,8,1,0,0,0,185,193,5,87,0,0,186,187,5,117,
  	0,0,187,188,5,110,0,0,188,189,5,116,0,0,189,190,5,105,0,0,190,193,5,108,
  	0,0,191,193,5,85,0,0,192,185,1,0,0,0,192,186,1,0,0,0,192,191,1,0,0,0,
  	193,10,1,0,0,0,194,195,5,82,0,0,195,12,1,0,0,0,196,197,5,46,0,0,197,198,
  	5,46,0,0,198,14,1,0,0,0,199,200,5,61,0,0,200,201,5,62,0,0,201,16,1,0,
  	0,0,202,203,5,45,0,0,203,204,5,62,0,0,204,18,1,0,0,0,205,206,5,60,0,0,
  	206,207,5,45,0,0,207,208,5,62,0,0,208,20,1,0,0,0,209,210,5,124,0,0,210,
  	211,5,61,0,0,211,217,5,62,0,0,212,213,5,91,0,0,213,214,5,93,0,0,214,215,
  	5,61,0,0,215,217,5,62,0,0,216,209,1,0,0,0,216,212,1,0,0,0,217,22,1,0,
  	0,0,218,219,5,124,0,0,219,220,5,45,0,0,220,226,5,62,0,0,221,222,5,91,
  	0,0,222,223,5,93,0,0,223,224,5,45,0,0,224,226,5,62,0,0,225,218,1,0,0,
  	0,225,221,1,0,0,0,226,24,1,0,0,0,227,228,5,61,0,0,228,26,1,0,0,0,229,
  	230,5,35,0,0,230,231,5,35,0,0,231,28,1,0,0,0,232,233,5,59,0,0,233,30,
  	1,0,0,0,234,235,5,102,0,0,235,236,5,105,0,0,236,237,5,114,0,0,237,238,
  	5,115,0,0,238,239,5,116,0,0,239,240,5,95,0,0,240,241,5,109,0,0,241,242,
  	5,97,0,0,242,243,5,116,0,0,243,244,5,99,0,0,244,245,5,104,0,0,245,32,
  	1,0,0,0,246,247,5,110,0,0,247,248,5,111,0,0,248,249,5,116,0,0,249,34,
  	1,0,0,0,250,251,5,97,0,0,251,252,5,110,0,0,252,253,5,100,0,0,253,36,1,
  	0,0,0,254,255,5,105,0,0,255,256,5,110,0,0,256,257,5,116,0,0,257,258,5,
  	101,0,0,258,259,5,114,0,0,259,260,5,115,0,0,260,261,5,101,0,0,261,262,
  	5,99,0,0,262,263,5,116,0,0,263,38,1,0,0,0,264,265,5,111,0,0,265,266,5,
  	114,0,0,266,40,1,0,0,0,267,268,5,64,0,0,268,269,5,116,0,0,269,270,5,114,
  	0,0,270,271,5,117,0,0,271,279,5,101,0,0,272,273,5,64,0,0,273,274,5,102,
  	0,0,274,275,5,97,0,0,275,276,5,108,0,0,276,277,5,115,0,0,277,279,5,101,
  	0,0,278,267,1,0,0,0,278,272,1,0,0,0,279,42,1,0,0,0,280,281,3,91,45,0,
  	281,282,3,69,34,0,282,283,5,44,0,0,283,284,5,98,0,0,284,285,5,111,0,0,
  	285,286,5,111,0,0,286,287,5,108,0,0,287,288,1,0,0,0,288,289,3,93,46,0,
  	289,44,1,0,0,0,290,291,3,91,45,0,291,292,3,69,34,0,292,293,5,44,0,0,293,
  	294,5,105,0,0,294,295,5,110,0,0,295,296,5,116,0,0,296,297,1,0,0,0,297,
  	298,3,93,46,0,298,46,1,0,0,0,299,300,5,108,0,0,300,305,5,108,0,0,301,
  	302,5,117,0,0,302,303,5,108,0,0,303,305,5,108,0,0,304,299,1,0,0,0,304,
  	301,1,0,0,0,305,48,1,0,0,0,306,307,3,79,39,0,307,50,1,0,0,0,308,309,3,
  	91,45,0,309,310,3,69,34,0,310,311,5,44,0,0,311,312,5,102,0,0,312,313,
  	5,108,0,0,313,314,5,111,0,0,314,315,5,97,0,0,315,316,5,116,0,0,316,317,
  	1,0,0,0,317,318,3,93,46,0,318,52,1,0,0,0,319,320,5,123,0,0,320,54,1,0,
  	0,0,321,322,5,125,0,0,322,56,1,0,0,0,323,324,5,91,0,0,324,58,1,0,0,0,
  	325,326,5,93,0,0,326,60,1,0,0,0,327,328,5,40,0,0,328,62,1,0,0,0,329,330,
  	5,41,0,0,330,64,1,0,0,0,331,332,5,105,0,0,332,333,5,110,0,0,333,334,5,
  	115,0,0,334,335,5,105,0,0,335,336,5,100,0,0,336,337,5,101,0,0,337,66,
  	1,0,0,0,338,339,5,36,0,0,339,340,5,115,0,0,340,341,5,116,0,0,341,342,
  	5,97,0,0,342,343,5,98,0,0,343,344,5,108,0,0,344,361,5,101,0,0,345,346,
  	5,36,0,0,346,347,5,112,0,0,347,348,5,97,0,0,348,349,5,115,0,0,349,361,
  	5,116,0,0,350,351,5,36,0,0,351,352,5,114,0,0,352,353,5,111,0,0,353,354,
  	5,115,0,0,354,361,5,101,0,0,355,356,5,36,0,0,356,357,5,102,0,0,357,358,
  	5,101,0,0,358,359,5,108,0,0,359,361,5,108,0,0,360,338,1,0,0,0,360,345,
  	1,0,0,0,360,350,1,0,0,0,360,355,1,0,0,0,361,68,1,0,0,0,362,366,3,71,35,
  	0,363,365,3,73,36,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,
  	367,1,0,0,0,367,70,1,0,0,0,368,366,1,0,0,0,369,371,7,0,0,0,370,369,1,
  	0,0,0,371,72,1,0,0,0,372,374,7,1,0,0,373,372,1,0,0,0,374,74,1,0,0,0,375,
  	377,5,45,0,0,376,378,2,48,57,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,
  	1,0,0,0,379,380,1,0,0,0,380,76,1,0,0,0,381,383,2,48,57,0,382,381,1,0,
  	0,0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,78,1,0,0,0,386,
  	388,5,45,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,391,
  	2,48,57,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,
  	0,0,393,394,1,0,0,0,394,396,5,46,0,0,395,397,2,48,57,0,396,395,1,0,0,
  	0,397,398,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,411,1,0,0,0,400,
  	402,5,45,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,
  	2,48,57,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,
  	0,0,407,408,1,0,0,0,408,409,5,46,0,0,409,411,5,102,0,0,410,387,1,0,0,
  	0,410,401,1,0,0,0,411,80,1,0,0,0,412,413,5,48,0,0,413,414,5,98,0,0,414,
  	416,1,0,0,0,415,417,2,48,49,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,
  	1,0,0,0,418,419,1,0,0,0,419,82,1,0,0,0,420,421,5,48,0,0,421,422,5,120,
  	0,0,422,424,1,0,0,0,423,425,7,2,0,0,424,423,1,0,0,0,425,426,1,0,0,0,426,
  	424,1,0,0,0,426,427,1,0,0,0,427,437,1,0,0,0,428,429,5,48,0,0,429,430,
  	5,120,0,0,430,432,1,0,0,0,431,433,7,3,0,0,432,431,1,0,0,0,433,434,1,0,
  	0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,420,1,0,0,0,436,
  	428,1,0,0,0,437,84,1,0,0,0,438,439,3,89,44,0,439,440,3,87,43,0,440,86,
  	1,0,0,0,441,443,7,4,0,0,442,444,7,5,0,0,443,442,1,0,0,0,444,445,1,0,0,
  	0,445,443,1,0,0,0,445,446,1,0,0,0,446,88,1,0,0,0,447,448,5,39,0,0,448,
  	90,1,0,0,0,449,450,5,171,0,0,450,92,1,0,0,0,451,452,5,187,0,0,452,94,
  	1,0,0,0,453,454,5,43,0,0,454,96,1,0,0,0,455,456,5,45,0,0,456,98,1,0,0,
  	0,457,458,5,42,0,0,458,100,1,0,0,0,459,460,5,47,0,0,460,102,1,0,0,0,461,
  	462,5,62,0,0,462,104,1,0,0,0,463,464,5,62,0,0,464,465,5,61,0,0,465,106,
  	1,0,0,0,466,467,5,60,0,0,467,108,1,0,0,0,468,469,5,60,0,0,469,470,5,61,
  	0,0,470,110,1,0,0,0,471,472,5,61,0,0,472,473,5,61,0,0,473,112,1,0,0,0,
  	474,475,5,33,0,0,475,476,5,61,0,0,476,114,1,0,0,0,477,478,5,38,0,0,478,
  	116,1,0,0,0,479,480,5,124,0,0,480,118,1,0,0,0,481,482,5,94,0,0,482,120,
  	1,0,0,0,483,484,5,126,0,0,484,122,1,0,0,0,485,486,5,60,0,0,486,487,5,
  	60,0,0,487,124,1,0,0,0,488,489,5,62,0,0,489,490,5,62,0,0,490,126,1,0,
  	0,0,491,492,5,38,0,0,492,493,5,38,0,0,493,128,1,0,0,0,494,495,5,124,0,
  	0,495,496,5,124,0,0,496,130,1,0,0,0,497,498,5,33,0,0,498,132,1,0,0,0,
  	499,500,5,58,0,0,500,134,1,0,0,0,501,502,5,58,0,0,502,503,5,58,0,0,503,
  	136,1,0,0,0,504,505,5,36,0,0,505,138,1,0,0,0,506,507,5,62,0,0,507,508,
  	5,60,0,0,508,140,1,0,0,0,509,510,7,6,0,0,510,142,1,0,0,0,511,512,7,7,
  	0,0,512,513,1,0,0,0,513,514,6,71,0,0,514,144,1,0,0,0,28,0,159,168,183,
  	192,216,225,278,304,360,366,370,373,379,384,387,392,398,401,406,410,418,
  	424,426,432,434,436,445,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  temporallexerLexerStaticData = staticData.release();
}

}

temporalLexer::temporalLexer(CharStream *input) : Lexer(input) {
  temporalLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *temporallexerLexerStaticData->atn, temporallexerLexerStaticData->decisionToDFA, temporallexerLexerStaticData->sharedContextCache);
}

temporalLexer::~temporalLexer() {
  delete _interpreter;
}

std::string temporalLexer::getGrammarFileName() const {
  return "temporal.g4";
}

const std::vector<std::string>& temporalLexer::getRuleNames() const {
  return temporallexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& temporalLexer::getChannelNames() const {
  return temporallexerLexerStaticData->channelNames;
}

const std::vector<std::string>& temporalLexer::getModeNames() const {
  return temporallexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& temporalLexer::getVocabulary() const {
  return temporallexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView temporalLexer::getSerializedATN() const {
  return temporallexerLexerStaticData->serializedATN;
}

const atn::ATN& temporalLexer::getATN() const {
  return *temporallexerLexerStaticData->atn;
}




void temporalLexer::initialize() {
  ::antlr4::internal::call_once(temporallexerLexerOnceFlag, temporallexerLexerInitialize);
}
